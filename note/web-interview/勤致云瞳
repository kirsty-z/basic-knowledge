前端工程师  12-15k  14-16k
熟悉ts react 独立开发组件
熟悉html/css，快速实现页面样式，动画特效
了解GraphQl，数据库的基本操作
了解RxJS库，了解函数式编程（fp-ts）
较强学习能力，沟通呢能力，团队协作能力及执行力
较好基础，了解主流框架，独立开发能力

GraphQl：针对Graph（图狀数据）进行查询特别有优势的query language
    用于api的查询语言，对api中的数据提供了一套易于理解的完整描述，使得客户端能够准确的获取它需要的数据，减少数据的冗余
    GraphQl服务其实对外只提供了一个用于调用内部接口的endpoint，所有请求都访问暴露出来唯一的端点
    GraphQl实际将多个HTTP请求聚合成一个请求，将多个restful请求的资源变成一个从根资源post访问其他资源的的图，多个请求变成了一个请求的不同字段，从原本分散式请求变成了集中式请求
    解决的问题：页面信息需要多个请求，请求之间存在依赖关系，增加新产品，RESTful跟着改
             查询数据时用 GraphQL 描述一下要查询的这些边和顶点就行，不需要去改 API 实现。
    缺点：Facebook没有公开GraphQl后端设计
          没有任何图概念的简单的事情用RESTful就能实现，没必要重写
          GraphQl查询的是图狀数据结构，返回的是树狀数据结构

RxJS：一个库，通过使用observable序列来编写异步和基于事件的函数
    它提供了一个核心类型 Observable，附属类型 (Observer、 Schedulers、 Subjects) 和受 [Array#extras] 启发的操作符 (map、filter、reduce、every, 等等)，这些数组操作符可以把异步事件作为集合来处理
    可以把RxJS作为一个处理事件的lodash
    ReactiveX 结合了 观察者模式、迭代器模式 和 使用集合的函数式编程，以满足以一种理想方式来管理事件序列所需要的一切
    用来解决异步事件管理的基本概念是：
      Observable（可观察对象）：表示一个概念，这个概念是一个可调用未来值或事件的集合
      Observer（观察者）：一个回调函数的集合，他知道如何监听由Observable提供的值
      subscription（订阅）：示 Observable 的执行，主要用于取消 Observable 的执行
      Operators (操作符): 采用函数式编程风格的纯函数 (pure function)，使用像 map、filter、concat、flatMap 等这样的操作符来处理集合
      Subject (主体): 相当于 EventEmitter，并且是将值或事件多路推送给多个 Observer 的唯一方式。
      Schedulers (调度器): 用来控制并发并且是中央集权的调度员，允许我们在发生计算时进行协调，例如 setTimeout 或 requestAnimationFrame 或其他。

fp-ts:是一套使用了typescript的工具包
  语法上是ts程序，代码风格十分接近纯函数式语言
  函数式编程核心是函数的组合而非过程的实现
  柯里化函数：是把接受多个参数的函数变换成接受一个单一参数的函数
  函数式编程将简易函数按照特定的逻辑组合成复杂的函数，最终实现函数目标
  flow：最基本的函数组合辅助函数，理论上可以组合任意数量的函数，由于typescript在类型推到的语法上的限制，fp-ts只声明最多9个参数的情况下的类型推导
  flow是fp-ts中最基本的函数，地位相当与传统函数程序设计中的顺序控制结构

面向对象：把现实世界的事物抽象成程序世界中的类和对象，通过封装，继承和多态来演示事物事件的联系
函数式编程：把现实世界的事物和是事物之间的联系抽象到程序世界（对运算过程进行抽象）
函数式编程中的函数不是程序中的函数，而是数学中的函数即映射关系
相同的输入始终要得到相同的输出（纯函数），函数式编程用来描述数据（函数）之间的映射

高阶函数：
  forEach
  map
  filter
  every
  some
  find/findIndex
  reduce
  sort
  函数式编程的编程单元是无状态函数
  面向过程的编程单元是函数
  面向对象的编程单元是类或对象

