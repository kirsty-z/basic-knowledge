
##JavaScript
1、JavaScript数据类型
    number string null boolean undefined object array function symbol

2、数组常用的方法
    增： push unshift splice concat
    删：pop shift slice splice
    查：indexOf includes find
    排序： reverse(倒序) sort
    转换： join
    迭代：some every forEach map filter

3、字符串常用方法
    增：concat
    删：slice substr(start,count) substring（start ,end）
    改：trim toLowCase toUpperCase
    查：charAt indexOf includes
    转换：split
    模板匹配：match search replace

4、js转换机制
    显示转换
        Number  （整体）
        parseInt （逐个）
        String（任何）
        Boolean （false：“” 0 NaN undefined null）
    隐式转换
        == === < > if  while
        + - * / %

5、 ==  和 ===
    区别：==先转为同一类型，再用严格模式比较； === 不转换类型，比较类型，比较值

6、深拷贝和浅拷贝
    浅拷贝：基本类型拷贝值，引用类型拷贝内存地址
        Object.assign
        Array.prototype.slice
        Array.prototype.concat
    深拷贝：开辟一个新的栈，两个对象属性完全相同，但是对应地址不同，修改一个对象属性，不会改变另一个对象属性
        _.cloneDeep
        jQuery.extend
        JSON.stringfy
        Object.definedProperty

7、闭包
    创建私有变量，延长变量的生命周期
    函数中的函数，为了让临时变量不被释放

8、作用域链
    作用域，即变量（变量作用域又称上下文）和函数生效的区域或集合
    作用域：全局作用域 函数作用域 块级作用域
    词法作用域：变量在创建时就确定了
    作用域链：JavaScript中使用一个变量，JavaScript引擎在当前作用域找，找不到就向上层作用域去寻找，
        以此类推，直到找到该变量或者已经到了全局作用域，仍然找不到，全局范围隐式声明该变量或者报错

9、原型，原型链
    原型：所有对象都有自己的原型对象，任何一个对象都可以充当其他对象的原型
    原型链：原型对象也是对象，也有自己的原型，因此会形成原型链，对象的原型，原型到原型的原型...

10、JavaScript如何实现继承
    第一步在子类的构造函数中调用父类的构造函数；
        Parent.call(this)
    第二步，让子类的原型指向父类的原型
        Sub.prototype=Object.create(Parent.prototype)
        Sub.prototype.construct=Sub;

11、this对象
    函数内部，指向window，严格模式会绑定undefined
    函数内部某个方法，this指向最后调用它的对象
    new：通过new命令生成一个实例对象，this指向实例对象
    apply\call\bind：this指向绑定的对象
    箭头函数：this指向window

12、执行上下文、执行栈
    执行上下文：一种对JavaScript代码执行环境的抽象概念
        全局执行上下文  函数执行上下文
    执行栈：调用栈，先进后出

13、事件模型
    事件：HTML文档或者浏览器中发生的一种交互操作
    事件流：dom树结构，触发节点，会按照一定顺序响应事件，响应的过程称为事件流
    事件流三个阶段：事件捕获阶段 处于目标阶段 事件冒泡阶段
    事件模型：原始事件模型 标准事件模型 IE事件模型
        标准事件模型
            事件捕获阶段：事件从document到目标元素，检测是否有监听事件，有，立马执行
            事件处理阶段：事件到达目标元素，触发目标元素监听函数
            事件冒泡阶段：事件从目标元素冒泡到document，检测经过的节点是否有监听事件，有立马执行
        当浏览器载入 HTML 文档, 它就会成为 Document 对象
        Document 对象是 HTML 文档的根节点
        Document 对象是 Window 对象的一部分，可通过 window.document 属性对其进行访问

14、typeof intanceof
    typeof:返回一个变量的基本类型
        缺点：可以判断基本类型（null除外）无法准确判断（除了function）引用类型的数据类型
    instanceof：返回一个布尔值
        缺点：可以判断复杂引用数据类型，无法准确判断基本数据类型

15、事件代理
    事件代理：把一个元素的响应事件的函数委托到另一个元素上
    事件流的三个阶段，捕获阶段-》目标阶段-》冒泡阶段，事件代理就是在冒泡阶段完成的
    应用场景：列表中有很多列表项，把点击事件绑定在父级元素ul上面
    优点：减少整个页面所需的内存，提升性能
          动态绑定，减少重复工作
    局限：focus blur 事件没有冒泡机制，不能进行委托绑定事件
          mouseout mousemove这样的事件有冒泡机制，但对性能消耗高，不适合于事件委托

16、new操作符
    原理：1.创建了一个空对象，作为要返回的对象实例
          2.将这个空对象的原型指向构造函数的prototype属性
          3.将这个空对象赋值给函数内部的this关键字
          4.开始执行构造函数内部代码

17、ajax原理，如何实现
    原理，通过XMLHttpRequest对象向服务器发送异步请求，服务器返回数据后，
          使用JavaScript操作dom实现不重新加载整个页面更新部分页面
    实现：
        1.创建XMLHttpRequest对象
        2.通过XMLHttpRequest的open与服务器建立连接
        3.构建请求所需的内容，通过XMLHttpRequest对象的send发送给服务器
        4.通过XMLHttpRequest对象的onreadystatechange监听通信状态
        5.接受服务器向客户端响应的数据
        6.处理数据更新页面

18、call apply bind
    绑定this的指向,第一个参数为this所指向的对象，
              如果第一个参数是null 或者undefined，this指向全局对象
    call：参数列表，依次传入
    apply：参数为一个数组形式
    call apply：一次性传参；
    bind：返回一个新函数，手动调用；参数列表，可以分多次传入

19、正则表达式
    正则表达式是一种用来匹配字符串的方法，给定模式匹配文本
    分两种：
        字面量
        RegExp构造函数
    方法：exec test search match replace split

20、事件循环
    同步任务：没有被JavaScript引擎挂起，在主线程排队执行的任务
    异步任务：被JavaScript引擎放在一边，不进入主线程的任务，进入任务队列的任务
    事件循环：引擎在不停的检查，一遍又一遍，只要同步任务执行完毕，引擎就会检查被挂起来的异步任务，是不是可以进入主线程
    异步任务：微任务和宏任务
        微任务：一个需要异步执行的任务，执行时机在主函数执行之后，宏任务结束之前
            Promise.then
        宏任务：setTimeout/setInterval
        正常任务追加到下一轮事件循环，微任务追加到本轮事件循环，意味着微任务执行事件早于正常任务

21、内存泄露
    内存泄露：由于疏忽或错误造成未能释放不在使用的内存
    垃圾回收机制：垃圾回收集器会定期（周期性）找出不在继续使用的变量，然后释放其内存
        方法：标记清除 引用计数
    泄露： 意外的全局变量
          意外的全局变量由this创建
          定时器
          闭包
          没有清理对dom元素的引用

22、本地存储方式
    cookie：标记用户与跟踪用户行为的情况
        服务器保存在浏览器的一小段文本信息，不能超过4kb
        缺点：容量小，缺乏数据操作接口，会影响性能
        删除：设置过期时间
    sessionStorage
        唯一与localStorage不同：保存数据用于浏览器的一次会话，一旦会话关闭，数据被删除

    localSrotage
        优先：
            持久化存储数据，除非主动删除数据，否则数据不会过期
            存储信息在同一个域中是共享的
            大小：5M，跟浏览器厂家有关
            对字符串的读取，存储过多消耗内存，导致页面变卡
            受同源政策限制
        缺点：
            无法设置过期事件，手动删除  removeItem clear
            只能存入字符串，无法直接存入对象
    IndexDB: api对象 浏览器提供的本地数据库
    数据与服务器之间交互：cookie数据自动传递到服务器，服务器也可以写cookie到客户端
            localStorage和sessionStorage不会自动把数据传递给服务器，仅保存在本地

23、函数式编程
    一种编程范式，一种编写程序的方法论
    编程范式：命令式编程，声明式编程 函数式编程
    优点：
        更好的管理状态
        更简单的复用
        更优雅的组合
        隐性好处。减少代码，提高维护性
    缺点：
        性能：上下文切换性能开销
        占用资源：在js中实现对象状态的不可变，往往会创建新的对象
        递归陷阱：为了实现迭代，往往会采用递归操作

24、函数缓存
    函数缓存就是将函数运行结果进行存储
    实现：闭包 柯里化 高阶函数
        闭包：函数调用函数
        柯里化：健接受多个参数的函数变为接受单一参数的函数
        高阶函数：通过接受其他函数作为参数或者返回其他函数的函数

25、JavaScript数字精度丢失
    js中数值是采用64位双精度浮点数编码，64位二进制
    第一个：符号位
    第二到12位（11）：指数部分
    第13个到64（53）：小数部分
    计算机存储双精度浮点数先把十进制转为二进制的科学计数法形式，以自己的规则（符号位+指数位+小数位）
        存储二进制的科学计数法
    存储有位数限制（64位），某些十进制转为二进制会出现无限循环，会造成二进制的舍入操作（0舍1如）
        当再转为十进制就存在误差
    解决方案
        把小数变为整数加减乘除，然后除以10的倍数

26、防抖节流
    节流：限制一个动作只能在一定时间內执行一次；
    防抖：n秒后执行该事件，若在n秒內被重复触发，则重新计时

27、单点登录
    sso:多个应用系统中，用户只需登录一次就可以访问所有相互信任的应用系统
    ？

28、web常见的攻击方式
    web攻击：针对用户上网行为或网络服务器设备进行攻击的行为
    XSS（cross sit scripting）:跨脚本攻击
        存储型 反射型 DOM型
        攻击要素：攻击者提交恶意代码  浏览器执行恶意代码
        预防： 存入数据转义  csp：建立白名单
              meta 标签的方式 <meta  http-equiv="Content-Security-Policy">
    CSRF（cross sit request forgery）:跨站请求伪造
        诱导被攻击者进入第三方网站，在第三方网站中，向被攻击网站发送跨域请求
        阻止方案：
            阻止不明外域的访问
                同源检测
                samesite cookie
            提交时要求附加本域才能获取信息
                CSRF token
                双重cookie验证

29、DOM BOM
    JavaScript由三部分组成：ECMAScript  BOM DOM
    BOM是浏览器对象模型：描述了与浏览器交互的方法和接口；根本对象是window
    DOM是文档对象模型：描述了处理网页内容的方法和接口；根部对象是document（实际是window.document）DOM是位