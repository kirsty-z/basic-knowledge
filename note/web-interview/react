1、react的新特性
    react：构建用户界面的JavaScript库，提供UI层面的解决方案
    jsx语法
    单向数据流
    虚拟DOM
    声明式编程
    Component
      可重用，可维护，可组合
    优势：
        高效灵活
        声明式的设计，提高代码复用率
        单向响应的数据流设计会比双向绑定的更安全，速度更快

2、真实DOM和虚拟DOM有什么区别
    真实DOM：文档对象模型，在页面渲染出来的每一个节点都是真实DOM
    虚拟DOM：本质上是JavaScript对象形式存在的DOM描述
    区别：虚拟DOM不会进行排版和重绘，真实DOM会频繁的进行排版和重绘
    优缺点：
      真实DOM：易用
              效率低：解析速度慢，内存占用量高
              性能差：频繁操作真实DOM，易于导致重绘与重流
      虚拟DOM：简单方便
              性能好
              跨平台：一套代码，多端运行
              有些性能要求极高的应用中虚拟DOM无法进行针对性的极致优化
              首次渲染DOM，由于多一层虚拟DOM，速度比正常稍慢

3、react生命周期有哪些不同阶段
    创建阶段：
        constructor：初始化state状态或者this上挂载方法
        getDerivedStateFromProps：静态方法，组件创建和更新执行，props 和state变化也会更新
            在每次render调用前，第一个参数为即将更新的props，第二个参数为上一个状态的state，可以比较props和state来加一些限制，防止无用的state更新
            该方法需要返回一个新的对象作为新的state或者返回null表示state状态不需要更新
        render：渲染DOM结构
        componentDidMount：组件挂载到真实DOM后执行，多用于执行一些数据获取，事件监听
    更新阶段：
        getDerivedStateFromProps
        shouldComponentUpdate:告诉组件本身基于当前的state和props是否需要重新渲染组件，默认情况返回true
        render
        getSnapshotBeforeUpdate
            该方法返回的一个Snapshot值，作为componentDidUpdate第三个参数传入
            目的在于获取组件更新前的一些信息
        componentDidUpdate：组件跟新后触发
    卸载阶段：
        componentWillUnmount：用于组件卸载，清理监听事假，或者取消订阅的网络请求

4、props和state
    相同：两者都是JavaScript对象
          两者都是用于保存信息
          props和state都能触发渲染更新
    不同：props是外部组件传递给组件的，而state是在组件內被组件自己管理的，一般在constructor中初始化
          props在组件内饰不可以被修改的，state在组件內可以修改
          state是多变的，可修改的

5、super 和super（props）
    react类组件基于es6，在constructor必须使用super
    在调用super过程，无论是否传入props，react内部都会将props赋值给组件实例props属性中
    如果只调用super，那么this.props在super()和构造函数结束之间仍是undefined

6、setState
    修改组件内部state的
    更新：在生命周期或react合成事件中，setState是异步的
          在setTimeout或者原生dom事件中，setState是同步的

7、react的事件机制
    react基于浏览器事件机制自身实现了一套事件机制，包括事件注册，事件合成，事件冒泡，事件派发等，react这套事件机制称为合成事件
    合成事件是react模拟原生dom事件所有能力的一个事件对象，即浏览器原生事件的跨浏览器包装器
    总结：react注册的事件都会最终绑定到document这个dom上，而不是react组件对应的dom
          react通过自身实现了一套冒泡机制，所以evt.stopPropagation无效
          react通过队列的形式，从触发的组件向父组件回溯，然后调用他们jsx中定义的callback
          react有一套自己的合成事件

8、react事件绑定的方法有哪些
    render方法中使用bind
    render中使用箭头函数
    constructor中bind
    定义阶段使用箭头函数绑定

9、react构建组件的方式有哪些
    函数式构建
    继承React.component创建

10、组件之间如何通信
    父组件向子组件传递：数据单向流动，在子组件标签內传递参数
    子组件向父组件传递：回调函数
    兄弟组件之间传递：父组件作为中间层来实现数据的互通
    父组件向后代传递：使用context提供组件之间通讯的一种方式，可以共享数据
    非关系组件传递：将数据进行一个全局资源管理，例如redux
    React是单向数据流，主要思想是组件不会改变接收的数据，只会监听数据的变化，
        当数据发生变化时它们会使用接收到的新值，而不是去修改已有的值
    ，数据的存储位置都是存放在上级位置中
    props和callback
    context
    redux
    ref

11、react中的key
    渲染列表的每一个子元素都应该需要一个唯一的key值
    良好使用key属性是性能优化的非常关键的一步

12、react refs的理解
    react refs提供了一种方式，允许我们访问DOM节点或render方法中创建的react元素
    创建：React.createRef() useRef
    使用场景：对dom元素的焦点控制，内容选择，控制
            对dom元素的内容设置及媒体播放
            对dom元素的操作和对组件实例的操作
            集成第三方DOM库

13、react中类组件和函数组件
    类组件：通过es6类的编码方式去编写组件，该类必须继承React.Component
    函数组件：通过函数编写的形式去实现一个react组件
    函数组件语法更短，跟简单，这是他容易开发、理解和测试
    而类组件也因大量使用this而让人感到困惑

14、受控组件和非受控组件
    受控组件：受我们控制的组件，组件的状态全程响应外部数据
    非受控组件：不受我们控制的数据

15、高阶组件
    高阶组件至少满足一下一个条件：
      接受一个函数或者多个函数作为输入
      输出一个函数
    使用高阶组件，遵循的约定：
      props保持一致
      不能在函数式组件上使用ref属性，因为他没有实例
      不要以任何方式改变原始组件
      不要再render方法中使用高阶组件
      使用compose组合高阶组件
      包装显示名字以便于调试
    权限控制、日志记录、数据校验、异常处理、统计上报等

16、react的hook
    hook是react16.8的新增特性，可以在不编写class的情况下使用state以及其他react特性

17、react 中引入css的方法
    在组件內直接使用
    组件中引入.css文件 ：样式全局生效
    组件中引入.module.css文件：将css作为一个模块引入，模块中的所有css，只作用于当前组件
    css in js：由第三方库提供

19、react中间过度动画如何实现
    react-transition-group，react-motion，Animated，以及原生的CSS都能完成切换动画
    react-transition-group:组件的入场离场主要三个组件
        CSSTransition：在前端开发中，结合 CSS 来完成过渡动画效果
        SwitchTransition：两个组件显示和隐藏切换时，使用该组件
        TransitionGroup：将多个动画组件包裹在其中，一般用于列表中元素的动画

20、redux
    将所有状态进行集中管理，当需要更新状况的时候，仅需要对这个管理集中处理
    redux就是集中管理容器，遵循三大基本原则：
        单一数据源
        state只读
        使用纯函数来执行修改
    工作原理：
        redux要求把数据都放在store公共存储空间
        一个组件改变了store里的数据内容，其他组件就能感知store变化，再来取数据，从而间接实现了这些数据传递的功能
        store是图书馆---reducer是记录本----state是数据信息
    使用：
        1.创建一个store公共数据区域
        2.创建reducer管理数据，接受两个参数（state，action），返回state
        3.把reducer传递给store，建立连接
        4.获取数据
        5.更改数据
        6.通过store.subscribe监听store变化
        const redux = require('redux');
        const initialState={
          counter:0
        }
        ##创建reducer
        const reducer = (state=initialState,action)=>{
          switch(action.type){
            case "INCREMENT":
              return {...state,counter:state.counter+1};
            case "DECREMENT":
              return {...state, counter: state.counter - 1};
            case "ADD_NUMBER":
              return {...state, counter: state.counter + action.number}
            default:
              return state;
          }
        }
        ##根据reducer创建store
        const store=redux.createStore(reducer);
        store.subscribe(()=>{
          console.log(store.getState())
        })
        ##修改store中的state
        store.dispatch({
          type: "INCREMENT"
        })
        store.dispatch({
          type: "ADD_NUMBER",
          number: 5
        })
    小结：
        createStore可以帮助创建store
        store.dispatch帮助派发action，action会传递给store
        store.getState可以获取store里边所有的数据内容
        store.subscribe订阅store的改变，只要store发送变化，store.subscribe这个函数接收的这个回调函数就会被执行

21、redux中间件的理解，常用中间件有哪些
    中间件：介于应用系统和系统软件之间的一类软件，达到资源共享，功能共享的目的
    在redux中：中间件就放在dispatch过程，在分发action进行拦截处理
    常用的中间件：
        redux-thunk：用于异步操作
        redux-logger：用于日志记录
        上述中间件都需要通过applyMiddlewares进行注册，作用是将所有中间件组成一个数组，依次执行，然后作为第二个参数传入createStore中
            const store = redux.createStore(reducer,applyMiddlewares(thunk,logger));

22、项目中如何使用redux
    react-redux分为:容器组件和UI组件
    两大核心：Provider 和connection
        Provider将store放在顶层元素中，所有组件都收redux控制，都能获取redux数据
            <Provider store={store}>
              <App/>
            </Provider>
        connection:connect方法将store上的getState 和 dispatch 包装成组件的props

23、react router，常用router
    react-router：无刷新的条件下切换显示不同的页面
    路由的本质就是页面URL发生改变时，页面的显示结果可以根据URL的变化而变化，当时页面不会刷新
    react-router分成不同的包：
        react-router：实现了路由的核心功能
        react-router-dom：基于react-router，加入浏览器运行环境下的一些功能
        react-router-native：基于react-router，加入react-native运行环境下的一些功能
        react-router-config：用于配置静态路由的工具库
    常用组件：react-router-dom的API
        BrowserRouter、HashRouter
            BrowserRouter是hsitory模式；使用两者作为最顶层组件包裹其他组件
        Route
          用于路径的匹配，然后进行组件的渲染；属性path component render exact
        Link、NavLink
          Link:路径的跳转，相当于a标签，to相当于href
          NavLink是在Link基础之上增加了一些样式属性；activeStyle（匹配时样式），activeClassName（匹配时添加的class）
        switch
          适用于当匹配到第一个组件的时候，就不应该继续匹配
        redirect
          重定向
    hook：
        useHistory：可以让组件内部直接访问history
        useLocation：返回当前url的location对象
        useParams：放回参数
    参数传递：
        动态路由方式： url中 :id  /abc  /123
        search传递参数：url中？后面的参数
        to传入对象:
          <NavLink to={{
              pathname: "/detail2",
              query: {name: "kobe", age: 30},
              state: {height: 1.98, address: "洛杉矶"},
              search: "?apikey=123"
          }}>详情</NavLink>

24、react router有几种模式
    单页面应用：一个web项目只有一个html页面，一旦页面加载完成后，就不用因为用户的操作而进行页面的加载或者跳转
    特性：改变url且不用浏览器向服务器发送请求
        在不刷新页面的前提下改变浏览器地址栏中的url地址
    模式： hash模式：在url后面加上#
            对应组件：HashRouter
          history模式
            对应组件BrowserRouter

25、Immutable
    不可更改，一旦创建，就不能再被更改的数据

26、render方法的原理
    类组件，指的是render方法
    函数组件，指的是函数本身
    触发事件：类组件调用setState、类组件重新渲染一定会触发，函数组件使用useState更改状态不一定会触发

27、react diff原理
    diff算法就是通过对比新旧virtual DOM 来找出真实DOM变化之处
    遵循三个层级的策略：
      tree层级：创建和删除
      component层级：创建和删除
      element层级：创建和删除和移动
    传统diff，遍历整个树进行比较，react diff：同层比较

28、react jsx 转为真实DOM过程
    jsx通过babel最终转换为React.createElement这种形式
    babel编译时判断jsx中组件的首字母：
        首字母小写：认定为原生DOM
        首字母大写：认定为组件
    节点：原生标签节点 文本节点  函数组件 类组件
    渲染流程：
        将jsx转换为React.createElement(...),babel帮助完成转换
        createElement对key和ref等特殊的props进行处理，并获取defaultProps对默认props赋值，并对传入的子节点进行处理，最终构造一个虚拟对象
        ReactDOM.render将生成好的虚拟对象渲染到指定容器上，最终转化为真实DOM

29、react性能优化
    避免使用内联函数
    使用react fragements避免额外的标记 <></>
    使用Immutable：减少渲染次数；
        在shouldComponentUpdate()中做对比，当返回true执行render方法；Immutable通过is方法则可以完成对比
    懒加载组件
    事件绑定方式
    服务端渲染
    组件拆分、合理使用hooks

30、react如何捕获错误
    错误边界：捕获发生在其子组件树任何位置的 JavaScript 错误，并打印这些错误，同时展示降级 UI，而并不会渲染那些发生崩溃的子组件树
    形成错误边界的两个条件：
        使用了static getDerivedStateFromError()
        使用了componentDIdCatch()
    无法捕捉：
        事件处理
        异步代码
        服务端渲染
        自身抛出的错误
    除此之外：可以监听onerror事件
        window.addEventListener("onerror",function(event){})

31、服务端渲染
    SSR：服务端渲染
    解决问题：SEO，由于搜索引擎爬虫抓取工具可以查看完全渲染的页面
            加速首屏加载，解决首屏白屏的问题
    原理：服务器运行react代码生成HTML-->发送HTML给浏览器-->浏览器接收内容并显示->>浏览器加载js文件->js代码执行并接管页面的操作

32、Fiber架构
    JavaScript引擎和渲染引擎是互斥的，一个线程执行时，另一个只能挂起等待
    架构角度：Fiber是对react核心算法的重新
    编程角度：Fiber是react内部定义的一种数据结构，他是Fiber树结构的节点单位，也是react 16新架构下的虚拟dom
    主要操作：为每个增加优先级
            增加异步任务
            dom diff树变为了链表
    Fiber把渲染更新过程拆分成多个子任务，每次只做一小部分，做完看是否还有剩余时间，如果有继续下一个任务；如果没有，挂起当前任务，将时间控制权交给主线程，等主线程不忙的时候继续执行

33、react中遇到的问题
    https://github.com/febobo/web-interview/issues/218

34、懒加载和异步加载
import("模块或者数据路劲").then(bundle=>{})

const LazyComponent=React.lazy(()=>import("模块或者路径"))
<React.Suspense fallback={<h1>loadding...</h1>}>
    <LazyComponent/>
</React.Suspense>