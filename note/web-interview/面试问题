1.数据类型:Undefined  string number null Boolean Symbol(基本类型)    object array date  bigint  map set  构造函数
2.typeof(null) 返回object  null==null  true ===  false
3. let:声明的变量只在代码块中有效
   var:变量提升,变量可以在声明之前使用
   const :声明一个只读的常量,常量的值不能改变
4.闭包:函数中的函数,为了让临时变量不被释放
5.事件冒泡,捕获
	cancleBubble:true  stopPropagation  preventDefault
6.节流,防抖
   防抖:在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时
   节流:规定一个单位时间，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事
件被触发多次，只有一次能生效。
lodash:JavaScript工具库
7.函数和构造函数
  构造函数：1. new fn( )
                     2 .构造函数内部会创建一个新的对象，即f的实例
                     3. 函数内部的this指向 新创建的f的实例
                     4. 默认的返回值是f的实例
     普通函数：1. fn( )
                     2. 在调用函数的内部不会创建新的对象
                     3. 函数内部的this指向调用函数的对象（如果没有对象调用，默认是window）
                     4. 返回值由return语句决定
8. apply call bind
    apply和call:传递参数不同, 从第二个参数起, call参数依次传递给借用的方法, apply将参数放在一个数组中再传递
    bind:绑定方法的对象
9.引入库的标准:
    AMD:依赖前置,依赖模块加载完成后就直接执行依赖模块,
    CMD:就近依赖,在依赖模块加载完成后并不执行，只是下载而已，等到所有的依赖模块都加载好后，进入回调函
    数逻辑，遇到 require 语句 的时候才执行对应的模块
   UMD: 兼容amd,commonjs,window,先判断commonjs,amd,都没有会挂载到window变量下
   CommonJS: 同步加载 运行时加载 nodejs 标准  require引入模块()
require.js 的核心原理是通过动态创建 script 脚本来异步引入模块，然后对每个脚本的 load 事件进行监听，
如果每个脚本都加载完成了，再调用回调函数。
10. ajax:通过XmlHttpRequest对象向服务器发送异步请求,从服务器获取数据然后用JavaScript来操作dom而跟新页面
11.attribute和prototype
12.load ready:load:html加载完毕 ready:html初屏渲染完毕,即dom完毕 哪怕图片字体那些没有完成 也算react
13.匿名函数: 一般用于统一this 我一般只用匿名函数
14.优化: 复用组件, 拆分大js为chunk,哪个组件需要再去加载
15.seo: 单页面应用,后台启动一个puppeteer 专为爬虫服务,自动给它渲染好
17.js事件循环:
18.get:参数放在URL之后, 长度有限制  2048  post:参数放在head请求头部里, 长度不限制
19.状态码:
     1**:信息, 服务器收到请求,需要请求在继续执行操作
     2**:成功, 操作被成功接收并处理
     3**:重定向
     4**:客户端错误
     5**:服务器错误
20.cookie:数据放在客户端浏览器上  单个cookie保存数据不超过4k
     session:数据放在服务器端, 一定时间没访问增 影响服务器性能
     cookie:会过期 有过期时间
     localStorage:长期有效, 删除.Remove  clear
     sessionStorage:页面关闭, 存放数据会删除
21. flex:弹性布局  子元素的float、clear和vertical-align失效
	flex-direction属性决定主轴的方向
	justify-content:项目在主轴上的对齐方式 flex-start | flex-end | center | space-between | space-around
	align-items:项目在交叉轴上如何对齐flex-start | flex-end | center | baseline | stretch

22.Http:超文本传输协议
    Content-Type，告诉客户端实际返回的内容的内容类型 Content-Type: text/html; charset=utf-8
23.描述从输入URL到页面渲染
24. absoulte  relative
25.sass  less
27.react
28,安全策略:
   XSS XSS 攻击指的是跨站脚本攻击，是一种代码注入攻击    存入数据转义  CSP ，CSP 的本质是建立一个白名单
  CSP 指的是内容安全策略，它的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行 HTTP 首部中的
Content-Security-Policy，
一种是设置 meta 标签的方式 <meta
http-equiv="Content-Security-Policy">
   CSRF 攻击指的是跨站请求伪造攻击  同源检测  CSRF Token 来进行验证 双重 Cookie 验证  设置 cookie 属性的时
候设置 Samesite
27.MVC和 MVVM
28.webpack :简化页面依赖的管理，并且通过将其打包为一个文件来降低页面加载时请求的资源数。
	四个核心的概念，分别是 Entry（入口）、Output（输出）、loader 和 Plugins（插件）
29.递归
- 优化点:
dns 预解析
尽量升级http协议 2.0 > 1.1
分包 chunk
cdn
serviceWorker 预加载js
图片用webp
前端错误收集 sentry
30.跨域
     HTTP 头部**Access-Control-Allow-Origin: *
     使用<script>进行 jsonp 请求
     内部服务器代理请求跨域 url，然后返回数据
31.Promise 是一个构造函数，接收一个函数作为参数，返回一个 Promise 实例
32.setInterval 的作用是每隔一段指定时间执行一个函数
    setTimeout :只调用一次  无视错误 无视延迟 不保证执行
33.hook
    useState:函数组件中使用state
    useEffect:它能在函数组件中执行副作用，并且它与 class 中的生命周期函数极为类似  返回一个函数,副作用可能需要清除
    第二个参数:数组, 对比, 一致跳过这个effect,一个不同都会执行
34.eslint:可组装的JavaScript和jsx检查的工具
WebSocket :
36.去重:indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。两个for循环  set
37.hosts:定义IP地址和主机名的映射关系 系统文件 能加快域名解析,屏蔽网站
38.typeof在判断null、array、object以及函数实例（new + 函数）时，得到的都是object  返回值为string
     instanceof 用来判断对象具体类型  返回值为boolean