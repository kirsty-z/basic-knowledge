github-token
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
let var const
javascript引擎的工作方式是，先解析代码，获得所有被声明的变量， 然后在一行一行运行
变量提升：所有变量的申明语句，都会被提升到代码头部
数据类型：
  number string null boolean  underfined  object（function arrary）symbol
  typeof：返回一个值的数据类型  function array返回object
  instanceof ：可以区分数组和对象
  null==underfined  NaN===NaN  false
  null 可以转化为0
数值：
  JavaScript提供有效数字长度为53个二进制位
  ox：十六进制
  ob：二进制
  0：十进制
  parseInt（string，radix）radix：2-36之间的整数
  parseInt("11",4)//5   1*4**1+1*4**0
  isFinite()是否为一个正常值
Object:
  构造方法：new
  静态方法：类自身的方法: 类名.keys()w
  实例方法：定义在Object.prototype（对象，类的实例）的方法，六个:a.valueOf()
  .preventExtensions：无法添加属性
  .seal：无法添加 删除
  .freeze无法添加 删除 修改
  漏洞：可以通过改变原型对象，来为对象增加属性。只能冻结属性指向的对象，而不能冻结对象本身的内容。
Array:
  实例方法：
    .slice（n位置起（包括），n2位置结束（不包括））重要应用：将类似数组的对象转为真正的数组
    .splice（start,count,添加的参数1,...,...）
    forEach 和map区别 forEach不返回值
String:
  .slice(start,end(不包括))end>start 返回空字符串
  .substring(start,end(不包括))end>start 调换位置  参数为负值，变为0
  .substr(start,count) count为负值，变为0
  .trim() 去除两端空格
  .match()是否匹配某个字符串，返回数组 不改变原数组
  .search()返回匹配第一个位置 否则-1
  .replace()替换（一般只替换第一个匹配，全部：/.../g）
  .split()分割字符串（没有参数，返回原字符串，第二个参数，返回数组最大成员）
Math：
  Math.ceil()：向上取整
  Math.floor()：向下取整
  Math.max()：最大值
  Math.min()：最小值
  Math.round()：四舍五入
  Math.random()：随机数
对象：
  对象是单个事物的抽象
  对象是一个容器，封装了属性和方法
  new：创建一个空对象，作为将要返回的对象实例
      对象实例的原型，指向构造函数的prototype
      this指向对象实例
原型：constructor：默认指向prototype对象所在的构造函数
    instanceof运算符只能用于对象，不适用原始类型的值。
    .__proto__返回对象的原型
    .constructor.prototype 返回对象的原型
    .getPrototypeOf():返回参数对象的原型 （推荐使用）
    .setPrototypeof（a，b）设置现有对象a的原型为b
    .create(A)以a为原型生成，继承了a对象的所有属性及方法
    isPrototypeOf()  检查某个对象是否是另一个对象的原型
    .getOwnPropertyNames() 返回对象本身所有属性的键名
    .hasOwnProperty（） 判断定义在自身的属性，还是定义在原形链上的属性
    .getOwnPropertyDescriptors()
让一个构造函数继承另一个构造函数：
  1.super() 在实例中调用父类的构造函数super，让子类实例具有父类实例的属性
  2.让子类的原型指向父类的原型
异步操作：
  单线程模型：多个线程，单个脚本只在一个主线程中运行
  同步任务是那些没有被引擎挂起、在主线程上排队执行的任务，前一个执行完，才执行后一个任务
  异步任务是那些被引擎放在一边，不进入主线程、而进入任务队列的任务
  事件循环：CPU遇到io操作，挂起等待中的任务，先运行后面排队的任务，等io操作返回结果，再回过头，把挂起的任务执行下去
  异步操作模式：
    回调函数 事件监听 发布/订阅（publish subscribe）
setTimerout:调整事件发生的顺序
            用户自定义回调的函数，通常在浏览器默认动作之前触发
Promise：是一个对象， 也是一个构造函数 三种状态（pending:异步操作未完成，fulfilled：异步操作成功 ， rejected:异步操作失败）
        .then（）接受两个回调函数。操作成功回调第一个函数，操作失败回调第二个函数
事件：
  事件操作（监听和触发）EventTarget
    .addEventListener(事件，回调函数，true:捕获阶段可以监听到事件/false：冒泡阶段可以监听到事件)绑定事件监听
    .removeEventListener()移除事件监听
    .dispatchEvent()触发事件：当前节点上触发指定事件，从而触发监听函数的执行
  事件模型：.stopPropagation()分别在捕获阶段和冒泡阶段，阻止了事件的传播 不包括当前节点其他事件监听函数
          .stopImmediatePropagation()() 取消事件  不触发后面的所有事件
          .preventDefault（）取消浏览器对当前事件的默认行为 不会阻止事件的传播。canclelable为true时生效
Cookie:由HTTP协议生成， 提供HTTP协议使用：对话管理 个性化信息  追踪用户
  window.navigator.cookieEnabled为true   返回cookie
  服务器希望浏览器保存cookie，在HTTP头信息放置一个set-cookie   浏览器向服务器发送HTTP请求都会带上相应的cookie
  属性：Expires：指定一个具体的到期时间  Date.prototype.toUTCString()  进行格式转换
      Max-Age:从现在开始cookie存在的秒数
      Domain：制定cookie属于那个域名
      Path:发送HTTP请求，那个路径会附带cookie
      Secure：指定只有在https下才能附送cookie
      HttpOnly：cookie无法通过JavaScript脚本拿到
      SameSite：防止CSRF攻击和用户追踪：  前提用户浏览器支持sameSite
        strict：完全禁止第三方cookie
        Lax:导航到目标网址的get请求，连接 预加载 get表单
        None:前提必须设置secure属性；如：1970年1月1日零点
    删除一个cookie：设置expires属性为一个过去的日期
同源：域名端口号协议相同
    限制：
      无法读取非同源的cookie
        Lax:导航到目标网址的get请求，连接 预加载 get表单
        None:前提必须设置secure属性；如：1970年1月1日零点
    删除一个cookie：设置expires属性为一个过去的日期
同源：域名端口号协议相同
    限制：
      无法读取非同源的cookie VGCF Blv
      无法接触非同源的dom
      无法向非同源的地址发送ajax请求



